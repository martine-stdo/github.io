<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于项目的说明</title>
      <link href="/posts/hadoopReadme/"/>
      <url>/posts/hadoopReadme/</url>
      
        <content type="html"><![CDATA[<h1 id="项目编写指南"><a href="#项目编写指南" class="headerlink" title="项目编写指南"></a>项目编写指南</h1><h4 id="6月15完成项目"><a href="#6月15完成项目" class="headerlink" title="6月15完成项目"></a>6月15完成项目</h4><p>##目前已经实现的功能</p><h3 id="文件上传下载演示"><a href="#文件上传下载演示" class="headerlink" title="文件上传下载演示"></a>文件上传下载演示</h3><p><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/UploadAndDel.gif"></p><h3 id="文件下载演示"><a href="#文件下载演示" class="headerlink" title="文件下载演示"></a>文件下载演示</h3><p><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/download.gif"></p><h3 id="各个页面的路由跳转"><a href="#各个页面的路由跳转" class="headerlink" title="各个页面的路由跳转"></a>各个页面的路由跳转</h3><p><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/router.gif"></p><hr><div align='center'><font size='4'><br>“骐骥一跃，不能十步，驽马十驾，公在不舍”<br></font></div><span id="more"></span><h4 id="写在前面的话："><a href="#写在前面的话：" class="headerlink" title="写在前面的话："></a>写在前面的话：</h4><p><strong>1.写项目要勇敢</strong><br><img src="https://img2.doubanio.com/view/photo/l/public/p2229651022.webp"><br>根据我自身的学习项目的经历，往往都是因为自己没写过项目或者没有****技能比如不会javascript不会html不会flak不会springboot等借口来搪塞过去,实际上往往是需要先开始写才会懂得这些技能，写项目就是首先要不怕不甚求解，遇到什么不会就直接去google(真不建议百度，大部分情况下它反而会阻碍你的进步)，以目标驱动发展，而不是等你学完xxxx全套课程后在开始（学完了黄花菜都凉了），边做边学是最好的方法</p><p><strong>2.写代码是热爱，写到世界充满爱</strong><br><img src="https://img9.doubanio.com/view/photo/l/public/p2179776895.webp"><br>要发自内心的想去写一个有意思的东西，而不是重复一些无意义的工作，不要划水开摆，会不会先且不论，但最起码能有所收获，不浪费时间。一起讨论解决问题的办法，共同攻克难题，选择在github上写代码是由于它的平台可以实现协同开发，可以大大加速开发效率，其实它不麻烦，如果以后还要写代码或者从事相关行业，提前了解它没啥坏处</p><p><strong>3.达成成就</strong></p><p><img src="https://thumb11.jfcdns.com/2017-11/bce59fe774377d3d.png"></p><p>本项目预计使用<strong>springboot</strong>,<strong>vue3</strong>,以及综合了hadoop<br>用到了java,css,html,javascript,flume,hadoop,mysql,mybats-plus等技术知识，一套全流程，项目实现了<strong>前后端分离</strong>正所谓传统功夫和新时代大数据技术的集大成者，众所周知我和大四的学生开发了一个系统拿来给他做毕设，据我了解他们的毕设也不过如此，这个项目做好了胜过他们的毕设（你们继续在此基础添砖加瓦的话），认真写确实能学到不少东西，我也是刚开始学springboot,遇到问题大家一起解决，共同进步</p><p><strong>4.解决问题的办法：</strong><br><strong>首先谷歌，其次gpt,然后讨论询问小组成员</strong><br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602195743.png"></p><p><strong>5.珍藏多年的武林秘籍</strong><br><img src="https://picx.zhimg.com/v2-b32f1cbe89988687c50e7ecccd31bbb0_720w.jpg?source=172ae18b"></p><ul><li><a href="https://www.google.com.hk/">遇事不决先谷歌</a></li><li><strong>MDN</strong>查询前端知识<code>https://developer.mozilla.org/zh-CN/</code></li><li><strong>freecodecamp</strong>高质量视频教程<code>https://www.youtube.com/@freecodecamp</code></li><li><strong>stackoverflow</strong>国外高质量提问平台 <code>https://stackoverflow.com/</code></li><li><strong>下载找maven依赖的</strong><code>https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security/3.1.0</code></li><li><strong>Bootstrap</strong>我目前的前端页面都是抄他的<code>https://v5.bootcss.com/</code></li><li><strong>vue3的中文文档</strong><code>https://cn.vuejs.org/guide/introduction.html</code></li><li><strong>chatgpt</strong>属于你的私人教授</li><li><strong>Copilot</strong>(建议淘宝购买github学生包使用)<code>https://github.com/features/copilot</code></li></ul><p><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/1685706611114.jpg"></p><hr><h2 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h2><p>首先使用git clone把我们的项目下载到本地<br>前端建议使用vscode编辑<br>建议安装拓展Vue Language Features提供前端代码补全<br>后端使用idea随各人喜好，可以任意使用你熟悉的编辑器</p><p>使用的框架springboot不需要你们下载打开用idea打开backend文件夹，重载一下pom里面的依赖<br>需要你们安装的是vue3，如果没有mysql的话需要</p><h2 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h2><h4 id="安装vue3流程如下："><a href="#安装vue3流程如下：" class="headerlink" title="安装vue3流程如下："></a>安装vue3流程如下：</h4><p>安装@vue&#x2F;cli<br>打开Git Bash，执行：<br><code>npm i -g @vue/cli</code><br>如果执行后面的操作有bug，可能是最新版有问题，可以尝试安装早期版本，比如：<code>npm i -g @vue/cli@4</code><br>启动vue的图形化项目管理界面<br><code>vue ui</code><br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602200814.png"></p><p>在终端使用vue ui启动脚手架后导入工程文件中的web文件夹<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602175948.png"><br>正常情况如下所示：<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602175724.png"><br>之后点击任务，点击运行<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602180217.png"><br>之后再点击输出就可以看到渲染的前端界面的端口号<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602180435.png">按住ctrl + 鼠标点击即可跳转前端界面<br>注意<br><strong>此时你依然无法快乐的写代码，因为你的后端还没有开启，登录和注册无法从后端数据库中读取用户信息，你还是无法进入前端界面查看功能</strong><br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602180531.png"></p><h2 id="后端"><a href="#后端" class="headerlink" title="后端:"></a>后端:</h2><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p><a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">官方下载地址</a><br>建议选择第二个（第一个是下载之后，联网下载，这里可以下载完整的安装包）<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602202201.png"><br>我也会发一个到群文件里<br>安装方法如下：<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602173301.png"></p><p><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602173524.png"><br>点击向右的箭头将所需的组件加入然后一直下一步就行（建议安装在c盘：一般编程环境或数据库这种我是习惯就默认位置）</p><h4 id="1-1-配置环境变量"><a href="#1-1-配置环境变量" class="headerlink" title="1.1 配置环境变量"></a>1.1 配置环境变量</h4><p>将<code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code>（如果安装到了其他目录，填写相应目录的地址即可）添加到环境变量PATH中，这样就可以在任意目录的终端中执行mysql命令了。</p><h4 id="1-2-mysql服务的关闭与启动（默认开机自动启动，如果想手动操作，可以参考如下命令）"><a href="#1-2-mysql服务的关闭与启动（默认开机自动启动，如果想手动操作，可以参考如下命令）" class="headerlink" title="1.2 mysql服务的关闭与启动（默认开机自动启动，如果想手动操作，可以参考如下命令）"></a>1.2 mysql服务的关闭与启动（默认开机自动启动，如果想手动操作，可以参考如下命令）</h4><p>关闭：<code>net stop mysql80</code><br>启动：<code>net start mysql80</code></p><h4 id="1-3-mysql的常用操作"><a href="#1-3-mysql的常用操作" class="headerlink" title="1.3 mysql的常用操作"></a>1.3 mysql的常用操作</h4><p>连接用户名为root，密码为123456的数据库服务：<code>mysql -uroot -p123456</code><br><code>show databases;</code>：列出所有数据库<br><code>create database kob;</code>：创建数据库<br><code>drop database kob;</code>：删除数据库<br><code>use kob;</code>：使用数据库kob<br><code>show tables;</code>：列出当前数据库的所有表<br><code>create table user(id int, username varchar(100));</code>：创建名称为user的表，表中包含id和username两个属性。<br><code>drop table user;</code>：删除表<br><code>insert into user values(1, &#39;yxc&#39;);</code>：在表中插入数据<br><code>select * from user;</code>：查询表中所有数据<br><code>delete from user where id = 2;</code>：删除某行数据</p><p>安装完成后使用idea的database可视化工具创建如下数据库：<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602175129.png"><br>一个叫kob的数据库，里面有一张叫user的表<br>四个列<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602175325.png"><br>id（设置为主键，并且为自增）,username,password,photo</p><p>所有工作完成后前端后端必须都启动才能正常运行代码以及实时监看代码功能</p><p>用idea打开工程项目的backend文件夹然后点击pom.xml文件重新加载maven文件依赖（没错又是熟悉的感觉，各种爆红😅，这个时候别慌尝试一下clash的tun模式（google了解一下），头铁也可以直接用国内网慢慢下）<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602181308.png">这里面的用户名和密码连接mysql用的根据你自身的情况修改，端口号是后端运行的端口号建议就用我的默认配置<br>如果你的运气够好，配置没有问题运行后端<br><img src="https://raw.githubusercontent.com/martine-stdo/my_images/master/20230602181534.png">看到如下没有报错那么恭喜你大功告成！！<br>成功把项目跑起来了（刚出新手村，还有代码等着你们写💁）<br><strong>！！！切记要想登录系统不要直接在数据库中加用户名和密码，系统的登录和注册均采用了jwt鉴权机制，数据库中的用户名和密码应该使用我提供的接口也就是前端的登录和注册来填写（聪明的你应该发现了，密码在后端数据库中存的是密文），总之你需要通过前端来登录和注册来实时观看你修改的前端页面</strong><br>如果你实在运行不起来可以向小组成员讨论或和roger(nighterdream)讨论</p><h2 id="hadoop期末大作业"><a href="#hadoop期末大作业" class="headerlink" title="hadoop期末大作业"></a>hadoop期末大作业</h2><p>实验要求</p><p>功能一<br>2022-2023 学年第二学期<br>Hadoop 大数据开发技术期末大作业<br>1）功能要求<br>1.阅读 2 篇关于 Hadoop 大数据开发的英文文献（不少于 5000 英文<br>单词）。</p><ol><li>将该英文文献上传到 Hadoop 高可用集群中的 HDFS。</li><li>调用 MapReduce 对文件中各个单词出现的次数进行统计。</li><li>利用 Apache Flume 实时将两篇文章单词统计的结果，合并在一个<br>文档中，再次自动上传到 HDFS。</li><li>设计一个带 web 界面的交互系统。</li></ol><p>功能二<br>（二）系统开发方向<br>网盘系统的设计和开发：使用Java语言，Spring等JavaEE开发框架，选择MySQL或HDFS文件作为数据存储手段，基于Hadoop开发一个网盘系统，主要包括系统前台和后台两个部分。网盘系统实现的基本功能包括以下几个：<br>  注册：用户注册账户；<br>  登录：用户登录个人账户；<br>上传：从用户本地发送文件到服务器；<br>查询：查看服务器上存储文件的情况；<br>下载：用户从服务器上下载指定的文件到用户本地；<br>删除：用户删除服务器上的文件资源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书剑恩仇录</title>
      <link href="/posts/e2/"/>
      <url>/posts/e2/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一下那些遇到的句子"><a href="#记录一下那些遇到的句子" class="headerlink" title="记录一下那些遇到的句子"></a>记录一下那些遇到的句子</h1><hr><p><img src="/images/yourname.jpg"></p><div align='center'><font size='4'><br>keep going, never get you down<br></font></div><span id="more"></span><h3 id="stay-hungry-stay-foolish"><a href="#stay-hungry-stay-foolish" class="headerlink" title="stay hungry, stay foolish"></a>stay hungry, stay foolish</h3><h3 id="人生到处知何似-应似飞鸿踏雪泥"><a href="#人生到处知何似-应似飞鸿踏雪泥" class="headerlink" title="人生到处知何似,应似飞鸿踏雪泥"></a>人生到处知何似,应似飞鸿踏雪泥</h3><h3 id="纵使相逢应不识-尘满面-鬓如霜"><a href="#纵使相逢应不识-尘满面-鬓如霜" class="headerlink" title="纵使相逢应不识,尘满面,鬓如霜"></a>纵使相逢应不识,尘满面,鬓如霜</h3><h3 id="爱自己是浪漫终身的开始"><a href="#爱自己是浪漫终身的开始" class="headerlink" title="爱自己是浪漫终身的开始"></a>爱自己是浪漫终身的开始</h3><h3 id="你的体内若还留存着那孤岛-便足以对抗整个世界的荒谬"><a href="#你的体内若还留存着那孤岛-便足以对抗整个世界的荒谬" class="headerlink" title="你的体内若还留存着那孤岛,便足以对抗整个世界的荒谬"></a>你的体内若还留存着那孤岛,便足以对抗整个世界的荒谬</h3><h3 id="为人者-有大度成大器也"><a href="#为人者-有大度成大器也" class="headerlink" title="为人者,有大度成大器也"></a>为人者,有大度成大器也</h3><h3 id="君子可内敛不可儒弱-面不公可起而论之"><a href="#君子可内敛不可儒弱-面不公可起而论之" class="headerlink" title="君子可内敛不可儒弱,面不公可起而论之"></a>君子可内敛不可儒弱,面不公可起而论之</h3><h3 id="Every-cloud-has-a-silver-lining"><a href="#Every-cloud-has-a-silver-lining" class="headerlink" title="Every cloud has a silver lining"></a>Every cloud has a silver lining</h3><h3 id="欲买桂花同载酒-终不似-少年游"><a href="#欲买桂花同载酒-终不似-少年游" class="headerlink" title="欲买桂花同载酒,终不似,少年游"></a>欲买桂花同载酒,终不似,少年游</h3><h3 id="已识乾坤大-犹怜草木青"><a href="#已识乾坤大-犹怜草木青" class="headerlink" title="已识乾坤大,犹怜草木青"></a>已识乾坤大,犹怜草木青</h3><h3 id="我爱你不止是因为你的样子-还有跟你在一起时我的样子"><a href="#我爱你不止是因为你的样子-还有跟你在一起时我的样子" class="headerlink" title="我爱你不止是因为你的样子,还有跟你在一起时我的样子"></a>我爱你不止是因为你的样子,还有跟你在一起时我的样子</h3><h3 id="你对我的百般注解和识读，并构不成万分之一的我，却是一览无遗的你"><a href="#你对我的百般注解和识读，并构不成万分之一的我，却是一览无遗的你" class="headerlink" title="你对我的百般注解和识读，并构不成万分之一的我，却是一览无遗的你"></a>你对我的百般注解和识读，并构不成万分之一的我，却是一览无遗的你</h3><h3 id="与恶龙缠斗过久-自身亦成恶龙；凝视深渊过久-恶渊亦将以于凝视"><a href="#与恶龙缠斗过久-自身亦成恶龙；凝视深渊过久-恶渊亦将以于凝视" class="headerlink" title="与恶龙缠斗过久,自身亦成恶龙；凝视深渊过久,恶渊亦将以于凝视"></a>与恶龙缠斗过久,自身亦成恶龙；凝视深渊过久,恶渊亦将以于凝视</h3><h3 id="fail-to-read-the-room"><a href="#fail-to-read-the-room" class="headerlink" title="fail to read the room"></a>fail to read the room</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 鸡汤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kingofbot一个贪吃蛇对战平台</title>
      <link href="/posts/a4b4/"/>
      <url>/posts/a4b4/</url>
      
        <content type="html"><![CDATA[<h3 id="一款多人，pvp-pve在线平台"><a href="#一款多人，pvp-pve在线平台" class="headerlink" title="一款多人，pvp, pve在线平台"></a>一款多人，pvp, pve在线平台</h3><p><a href="https://imgse.com/i/xBcp6S"><img src="https://s1.ax1x.com/2022/10/16/xBcp6S.jpg" alt="xBcp6S.jpg"></a></p><div align='center'><font size='4'><br>“Springboot实战项目”<br></font></div><span id="more"></span><h3 id="1-创建公共组件AcGameObject-js"><a href="#1-创建公共组件AcGameObject-js" class="headerlink" title="1.创建公共组件AcGameObject.js"></a>1.创建公共组件AcGameObject.js</h3><p>用作前端所有对象的基类，包括start(), update(), 每秒更新60帧<br>具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">const AC_GAME_OBJECT = [];</span><br><span class="line"></span><br><span class="line">export class AcGameobject &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        AC_GAME_OBJECT.push(this);</span><br><span class="line"></span><br><span class="line">        this.timedelta = 0;</span><br><span class="line">        this.has_called_satrt = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start() &#123; //只执行一次</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update() &#123; //每一帧执行一次，除了第一帧之外</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    on_destroy() &#123;//删除之前执行</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    destroy() &#123;//删除对象</span><br><span class="line">        this.on_destroy();</span><br><span class="line"></span><br><span class="line">        for (let i in AC_GAME_OBJECT) &#123;</span><br><span class="line">            const obj = AC_GAME_OBJECT[i];</span><br><span class="line">            if (obj == this) &#123;</span><br><span class="line">                AC_GAME_OBJECT.splice(i);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let last_timestamp; //上一次执行的时刻</span><br><span class="line">const step = timestamp =&gt; &#123;</span><br><span class="line">    for (let obj of AC_GAME_OBJECT) &#123;</span><br><span class="line">        if (!obj.has_called_satrt) &#123;</span><br><span class="line">            obj.has_called_satrt = true;</span><br><span class="line">            obj.start();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            obj.timedelta = timestamp - last_timestamp;</span><br><span class="line">            obj.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last_timestamp = timestamp;</span><br><span class="line">    requestAnimationFrame(step)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestAnimationFrame(step)</span><br></pre></td></tr></table></figure><h3 id="2-创建PlayGround-vue用于显示地图，在PkindexView-vue中引用（入口）："><a href="#2-创建PlayGround-vue用于显示地图，在PkindexView-vue中引用（入口）：" class="headerlink" title="2.创建PlayGround.vue用于显示地图，在PkindexView.vue中引用（入口）："></a>2.创建PlayGround.vue用于显示地图，在PkindexView.vue中引用（入口）：</h3><p>PkindexView.vue代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;PlayGround /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import PlayGround from &#x27;../../components/PlayGround.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        PlayGround</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>PlayGround.vue代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;playground&quot;&gt;</span><br><span class="line">        &lt;GameMap/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GameMap from &quot;./GameMap.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        GameMap,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scope&gt;</span><br><span class="line">div.playground &#123;</span><br><span class="line">    width: 60vw;</span><br><span class="line">    height: 70vh;</span><br><span class="line">    margin: 40px auto;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-1在PlayGround中还需要显示地图的区域，PlayGround为map的基层："><a href="#2-1在PlayGround中还需要显示地图的区域，PlayGround为map的基层：" class="headerlink" title="2.1在PlayGround中还需要显示地图的区域，PlayGround为map的基层："></a>2.1在PlayGround中还需要显示地图的区域，PlayGround为map的基层：</h3><p>Map.vue代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div ref=&quot;parent&quot; class=&quot;gamemap&quot;&gt;</span><br><span class="line">        &lt;canvas ref=&quot;canvas&quot;&gt;</span><br><span class="line">        &lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; GameMap &#125; from &quot;../assets/scripts/GameMap&quot;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let parent = ref(null);</span><br><span class="line">        let canvas = ref(null);</span><br><span class="line"></span><br><span class="line">        onMounted(() =&gt; &#123;</span><br><span class="line">            new GameMap(canvas.value.getContext(&#x27;2d&#x27;), parent.value);</span><br><span class="line">        &#125;)</span><br><span class="line">        return &#123;</span><br><span class="line">            parent,</span><br><span class="line">            canvas</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">div.gamemap &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2由上代码可知需要一个对象逻辑GameMap-js来产生地图，以及根据页面大小时时根据canvas的大小来调整正方形地图的大小代码如下："><a href="#2-2由上代码可知需要一个对象逻辑GameMap-js来产生地图，以及根据页面大小时时根据canvas的大小来调整正方形地图的大小代码如下：" class="headerlink" title="2.2由上代码可知需要一个对象逻辑GameMap.js来产生地图，以及根据页面大小时时根据canvas的大小来调整正方形地图的大小代码如下："></a>2.2由上代码可知需要一个对象逻辑GameMap.js来产生地图，以及根据页面大小时时根据canvas的大小来调整正方形地图的大小代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AcGameobject &#125; from &quot;./AcGameObject&quot;;</span><br><span class="line">import &#123; Wall &#125; from &quot;./Wall&quot;;</span><br><span class="line"></span><br><span class="line">export class GameMap extends AcGameobject &#123;</span><br><span class="line">    //ctx画布， parent画布的父元素用来动态修改画布长宽</span><br><span class="line"></span><br><span class="line">    constructor(ctx, parent) &#123;</span><br><span class="line">        super();</span><br><span class="line"></span><br><span class="line">        this.ctx = ctx;</span><br><span class="line">        this.parent = parent;</span><br><span class="line">        this.L = 0;</span><br><span class="line"></span><br><span class="line">        this.rows = 13;</span><br><span class="line">        this.cols = 13;</span><br><span class="line"></span><br><span class="line">        this.inner_walls_count = 20;</span><br><span class="line">        this.walls = [];</span><br><span class="line">    &#125;</span><br><span class="line">    //判断两蛇是否联通,八皇后问题递归算法</span><br><span class="line">    check_connectivity(g, sx, sy, tx, ty) &#123;</span><br><span class="line">        if (sx == tx &amp;&amp; sy == ty) return true;</span><br><span class="line">        g[sx][sy] = true;</span><br><span class="line"></span><br><span class="line">        let dx = [-1, 0, 1,0], dy = [0, 1, 0, -1];</span><br><span class="line">        for (let i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">            let x = sx + dx[i], y = sy + dy[i];</span><br><span class="line">            if (!g[x][y] &amp;&amp; this.check_connectivity(g, x, y, tx, ty)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    create_walls() &#123;</span><br><span class="line">        const g = [];//墙的状态数组</span><br><span class="line">        //初始化墙</span><br><span class="line">        for (let r = 0; r &lt; this.rows; r++) &#123;</span><br><span class="line">            g[r] = [];</span><br><span class="line">            for (let c = 0; c &lt; this.cols; c++) &#123;</span><br><span class="line">                g[r][c] = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 给左右两边加上墙</span><br><span class="line"></span><br><span class="line">        // for (let r = 0; r &lt; this.rows; r++) &#123;</span><br><span class="line">        //     g[r][0] = g[r][this.cols - 1] = true;</span><br><span class="line">        // &#125;</span><br><span class="line"></span><br><span class="line">        //给上下两边加上墙</span><br><span class="line"></span><br><span class="line">        // for (let c = 0; c &lt; this.cols; c++) &#123;</span><br><span class="line">        //     g[0][c] = g[this.rows - 1][c] = true;</span><br><span class="line">        // &#125;</span><br><span class="line"></span><br><span class="line">        for (let r = 0; r &lt; this.rows; r++) &#123;</span><br><span class="line">            for (let c = 0; c &lt; this.cols; c++) &#123;</span><br><span class="line">                g[r][0] = g[r][this.cols - 1] = true;</span><br><span class="line">                g[0][c] = g[this.rows - 1][c] = true;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //创建障碍物</span><br><span class="line">        for (let i = 0; i &lt; this.inner_walls_count / 2; i++) &#123;</span><br><span class="line">            for (let j = 0; j &lt; 1000; j++) &#123;</span><br><span class="line">                let r = parseInt(Math.random() * this.rows);</span><br><span class="line">                let c = parseInt(Math.random() * this.cols);</span><br><span class="line"></span><br><span class="line">                if (c == 1 &amp;&amp; r == this.rows - 2 || r == 1 &amp;&amp; c == this.cols - 2) continue;</span><br><span class="line"></span><br><span class="line">                if (g[r][c] || g[c][r]) continue;</span><br><span class="line"></span><br><span class="line">                g[r][c] = g[c][r] = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        const copy_g = JSON.parse(JSON.stringify(g));//复制状态数组为了不对原数组产生影响</span><br><span class="line"></span><br><span class="line">        if (!this.check_connectivity(copy_g, this.rows - 2, 1, 1, this.cols - 2)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (let r = 0; r &lt; this.rows; r++) &#123;</span><br><span class="line">            for (let c = 0; c &lt; this.cols; c++) &#123;</span><br><span class="line">                if (g[r][c]) &#123;</span><br><span class="line">                    this.walls.push(new Wall(r, c, this));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start() &#123;</span><br><span class="line">        for (let i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            if (this.create_walls()) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update_size() &#123;</span><br><span class="line">        this.L = parseInt(Math.min(this.parent.clientWidth / this.cols, this.parent.clientHeight / this.rows));</span><br><span class="line">        this.ctx.canvas.width = this.L * this.cols;</span><br><span class="line">        this.ctx.canvas.height = this.L * this.rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update() &#123;</span><br><span class="line">        this.update_size();</span><br><span class="line">        this.render();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        const color_even = &quot;rgb(162, 209, 73)&quot;, color_odd = &quot;rgb(170, 214, 81)&quot;;</span><br><span class="line">        for (let r = 0; r &lt; this.rows; r++) &#123;</span><br><span class="line">            for (let c = 0; c &lt; this.cols; c++) &#123;</span><br><span class="line">                if ((r + c) % 2 == 0) &#123;</span><br><span class="line">                    this.ctx.fillStyle = color_even;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.ctx.fillStyle = color_odd;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                this.ctx.fillRect(c * this.L, r * this.L, this.L, this.L);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3以上代码中产生了地图，墙，墙后渲染所以覆盖了地图，除此以外还加入了中间的障碍物，为了保证游戏公平性障碍物以对角线对称，并且每秒刷新60词，地图保证连通性通过check-connectivity-中的八皇后算法，中间障碍物需要一个Wall-js逻辑来渲染产生，生成墙函数create-wall-在satart-中调用，通过连同性函数检查一千次，如果超过一千次则无法产生地图。"><a href="#2-3以上代码中产生了地图，墙，墙后渲染所以覆盖了地图，除此以外还加入了中间的障碍物，为了保证游戏公平性障碍物以对角线对称，并且每秒刷新60词，地图保证连通性通过check-connectivity-中的八皇后算法，中间障碍物需要一个Wall-js逻辑来渲染产生，生成墙函数create-wall-在satart-中调用，通过连同性函数检查一千次，如果超过一千次则无法产生地图。" class="headerlink" title="2.3以上代码中产生了地图，墙，墙后渲染所以覆盖了地图，除此以外还加入了中间的障碍物，为了保证游戏公平性障碍物以对角线对称，并且每秒刷新60词，地图保证连通性通过check_connectivity()中的八皇后算法，中间障碍物需要一个Wall.js逻辑来渲染产生，生成墙函数create_wall()在satart()中调用，通过连同性函数检查一千次，如果超过一千次则无法产生地图。"></a>2.3以上代码中产生了地图，墙，墙后渲染所以覆盖了地图，除此以外还加入了中间的障碍物，为了保证游戏公平性障碍物以对角线对称，并且每秒刷新60词，地图保证连通性通过check_connectivity()中的八皇后算法，中间障碍物需要一个Wall.js逻辑来渲染产生，生成墙函数create_wall()在satart()中调用，通过连同性函数检查一千次，如果超过一千次则无法产生地图。</h3><p>wall.js代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AcGameobject &#125; from &quot;./AcGameObject&quot;;</span><br><span class="line"></span><br><span class="line">export class Wall extends AcGameobject &#123;</span><br><span class="line">    constructor(r, c, gamemap) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.r = r;</span><br><span class="line">        this.c = c;</span><br><span class="line">        this.gamemap = gamemap;</span><br><span class="line">        this.color = &quot;rgb(185, 119, 43)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    update() &#123;</span><br><span class="line">        this.render();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        const L = this.gamemap.L;</span><br><span class="line">        const ctx = this.gamemap.ctx;</span><br><span class="line"></span><br><span class="line">        ctx.fillStyle = this.color;</span><br><span class="line">        ctx.fillRect(this.c * L, this.r * L, L, L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> springboot实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java16新特性record</title>
      <link href="/posts/4520/"/>
      <url>/posts/4520/</url>
      
        <content type="html"><![CDATA[<h3 id="关于record与class的区别"><a href="#关于record与class的区别" class="headerlink" title="关于record与class的区别"></a>关于record与class的区别</h3><p><a href="https://imgse.com/i/xW9WZ9"><img src="https://s1.ax1x.com/2022/10/25/xW9WZ9.png" alt="xW9WZ9.png"></a></p><div align='center'><font size='4'><br>我新提的java新特性啊！<br></font></div><span id="more"></span><hr><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>废话不多说直接上代码。<br>对于一些对象，列如一个平面里的点，或者一个范围序列，常见的用类实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//一个坐标</span><br><span class="line"></span><br><span class="line">class Point &#123;</span><br><span class="line">    private double x;</span><br><span class="line">    private double y;</span><br><span class="line">    //一个无参构造器</span><br><span class="line">    public Point() &#123;</span><br><span class="line">        x = 0;</span><br><span class="line">        y = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //一个自定义构造器</span><br><span class="line">    public Point(double x, double y) &#123;</span><br><span class="line">        x = x;</span><br><span class="line">        y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    // 利用静态变量构造一个原点</span><br><span class="line">    // 静态变量属于类，无论实例化了多少个对象都共享类的</span><br><span class="line">    //同一个静态变量</span><br><span class="line">    public final static Point = new Point();</span><br><span class="line"></span><br><span class="line">    //一个计算点与点之间距离的静态方法</span><br><span class="line">    //静态方法可以看作是一个c语言时的函数调用时用</span><br><span class="line">    //类名 . + 方法名</span><br><span class="line">    public static double distance(Point p1, Point p2) &#123;</span><br><span class="line">       return Math.hypot(p1.x - p2.x, p1.y - p2.y) ;</span><br><span class="line">       //要打印出结果还需要在主函数中用一个double来接收</span><br><span class="line">       //无法直接打印，但record有自定义的toString方法</span><br><span class="line">       //这意味这你可以直接打印这个实列，详情见下文record代码部分</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//一个范围</span><br><span class="line">class Range &#123;</span><br><span class="line">    //字段</span><br><span class="line">    private int from;</span><br><span class="line">    private int to;</span><br><span class="line">    //无参默认构造器</span><br><span class="line">    public Range() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    //一个自定义构造器</span><br><span class="line">    public Range(int from, int to) &#123;</span><br><span class="line"></span><br><span class="line">        //如果from 大于 to显然对于一个范围来说不太合适需要通过这个构造器矫正</span><br><span class="line">        if (from &gt; to) &#123;</span><br><span class="line">            int temp = from;</span><br><span class="line">            from = to;</span><br><span class="line">            to = temp;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            from = from;</span><br><span class="line">            to = to;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getFrom() &#123;</span><br><span class="line">        return from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getTo() &#123;</span><br><span class="line">        return to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>通过阅读以上代码我们会发现，我们的需求远小于代码量所支持的功能，因为我们并不需要修改字段（类的属性，在文中统称为字段）的数值，只是需要以实列的方式记录一下，单拎出比如p.x这样的属性，使用类有杀鸡用牛刀的感觉所以在java16中有一个新特性record使用方法基本和class一致。</p><h2 id="record"><a href="#record" class="headerlink" title="record"></a>record</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class recordTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        var p = new Point(3, 4);</span><br><span class="line">        System.out.println(&quot;Coordinates of p:&quot; + p.x() + &quot; &quot; + p.y()); </span><br><span class="line">        System.out.println(&quot;Distance from Origin:&quot; + p.distanceFromOrigin());</span><br><span class="line">        System.out.println(&quot;Distance from Origin:&quot; + Point.distance(Point.ORIGIN, p));</span><br><span class="line">        //记录可以直接将实例化的对象打印</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        var pt = new PointInTime(3, 4, new Date());</span><br><span class="line">        System.out.println(&quot;Before: &quot; + pt);</span><br><span class="line">        pt.when().setTime(0);</span><br><span class="line">        System.out.println(&quot;After: &quot; + pt);</span><br><span class="line"></span><br><span class="line">        var r = new Range(4, 3);</span><br><span class="line">        System.out.println(&quot;r: &quot; + r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">record Point(double x, double y) &#123;</span><br><span class="line">    //无参构造器</span><br><span class="line">    public Point() &#123;</span><br><span class="line">        this(0,0);</span><br><span class="line">    &#125;</span><br><span class="line">    //生成原点</span><br><span class="line">    public static Point ORIGIN = new Point();</span><br><span class="line">    //计算一个坐标到原点的距离</span><br><span class="line">    public double distanceFromOrigin() &#123;</span><br><span class="line">        return Math.hypot(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //计算两点间距离的静态方法，通过类名调用</span><br><span class="line">    //也可以通过实列对象调用啦，但根据江湖规矩还是用类名调用，不然别的程序员再维护你的代码时会痛骂你不讲武德。</span><br><span class="line">    public static double distance(Point p1, Point p2) &#123;</span><br><span class="line">        return Math.hypot(p1.x - p2.x, p1.y - p2.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    //public中有main方法这段就不会调用，主要是可以调试在终端中java ./Ponit就可以运行Point类中的main方法</span><br><span class="line">    //甚至在java6以前可以不带main方法打印“Hello, World!”, 简直逆天！！！</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Point p1 = new Point(3, 4);</span><br><span class="line">        Point p2 = new Point(5, 9);</span><br><span class="line">        </span><br><span class="line">        System.out.println(distance(p1, p2));</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">record PointInTime(double x, double y, Date when) &#123;&#125;</span><br><span class="line"></span><br><span class="line">record Range(int from, int to) &#123;</span><br><span class="line">    //对于一个范围来说from 大于to不合理，用构造器合理化。</span><br><span class="line">    public Range &#123;</span><br><span class="line">        if (from &gt; to) &#123;</span><br><span class="line">            int temp = from;</span><br><span class="line">            from = to;</span><br><span class="line">            to = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过值得注意的是record中的字段一旦初始化以后就不能再修改<br>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">record Point(double x, double y)&#123;&#125;</span><br><span class="line">//里面的相当于有如下实例字段的类</span><br><span class="line">private final double x;</span><br><span class="line">private final double y;</span><br></pre></td></tr></table></figure><p>并且不能为记录增加实例字段<br>record Point(double x, double y) {<br>    private double r;&#x2F;&#x2F;报错<br>}</p><hr><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>对于完全一组变量表示的不可变数据，要使用记录而不是类。如果数据是可变的，或者数据表示可能随着时间改变，则使用类。记录更易读、更高效，而且在并发程序中更安全。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老司机带你玩转windows</title>
      <link href="/posts/a99d/"/>
      <url>/posts/a99d/</url>
      
        <content type="html"><![CDATA[<h2 id="一些常用的windows操作小技巧"><a href="#一些常用的windows操作小技巧" class="headerlink" title="一些常用的windows操作小技巧"></a>一些常用的windows操作小技巧</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic.ikafan.com%2Fimgp%2FL3Byb3h5L2h0dHAvaW1hZ2U3MS4zNjBkb2MuY29tL0Rvd25sb2FkSW1nLzIwMTQvMDMvMjIxMi80MDEzODc2NF82LnBuZw%3D%3D.jpg&refer=http%3A%2F%2Fpic.ikafan.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1668419303&t=5568814d2c23b361ef36fcf6ff67591c"></p><hr><p>size&#x3D;’4’&gt;<br>“博主，博主你是做什么工作的？”<br></font></p><div align='center'><font </div><span id="more"></span><h4 id="一些题外话：（是否选择升级windows11）"><a href="#一些题外话：（是否选择升级windows11）" class="headerlink" title="一些题外话：（是否选择升级windows11）"></a>一些题外话：（是否选择升级windows11）</h4><p>关于这个问题我觉得是因人而异，因为现在不也照样有人在使用win7.可能很多人觉得windows11有很多bug，所以继续选择win10.但这可能是一个伪命题，因为也许你可能根本遇不到这个问题比如你是学土木，而他是学计算机学计算机的可能在配置一些vscode等编译器时会遇到中文乱码问题，但这并不影响学土木的同学。作为一个快使用了一年半win11的人来说基本没有遇到什么问题，即使是像编译器乱码比如vscode其实也是可以通过配置setting.json文件来解决问题，至于使用idea这类IDE工具则完全无需担心这个问题，侧面也回答了win11能否作为生产力这个问题无论是剪辑视频用的达芬奇，pr,ae还是编程都不会遇到问题，对于开发者来说win11自带的<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">wsl</a>（windows下的linux子系统）也是学习linux的不二之选（较高版本的win10也有这个功能，使用前记得去控制面板中启用该功能），即使有也不会有网上视频说的那么不可接受，反正我用了win11以后是再也回不去了，过了一年win11的正式版不仅效率高，而且相较于win10颜值也高了不少，窗口过渡动画也变得更加丝滑.<br><strong>我最中意的功能——多窗口布局</strong><br><img src="/images/windows.gif"><br><em>所以人生苦短，还有什么理由不升级win11呢？</em><br>ps:当然对于一些早期的电脑性能有限的情况下，还是win10较为稳定</p><hr><h3 id="快捷键篇"><a href="#快捷键篇" class="headerlink" title="快捷键篇"></a>快捷键篇</h3><p><em>我自己的键盘是将常用到控制按键键帽换成了蓝色</em><br><a href="https://imgse.com/i/x0697n"><img src="https://s1.ax1x.com/2022/10/15/x0697n.jpg" alt="x0697n.jpg"></a></p><h5 id="一、win-shift-s"><a href="#一、win-shift-s" class="headerlink" title="一、win + shift + s"></a><strong>一、win + shift + s</strong></h5><p>相较于使用第三方截屏工具，windows自带的不仅功能强大而且自带，使用迅速<br><img src="/images/shutscreen.gif"></p><h5 id="二、shif-delete-enter"><a href="#二、shif-delete-enter" class="headerlink" title="二、shif + delete + enter"></a><strong>二、shif + delete + enter</strong></h5><p>快速删除文件，免去回收站再次删除，多文件删除时搭配ctrl + A就体现出了其优势，但是缺点就是无法撤回，所以使用之前还请慎重考虑<br><img src="/images/delete.gif"></p><h5 id="三、win-D-搭配-ctrl-w"><a href="#三、win-D-搭配-ctrl-w" class="headerlink" title="三、win + D 搭配 ctrl + w"></a><strong>三、win + D 搭配 ctrl + w</strong></h5><p>win + d可以让你快速返回上一个应用，也可以快速返回桌面，ctrl + w可以快速关闭当前窗口，这两个一搭配可以实现高效率摸鱼<br><img src="/images/back.gif"></p><h5 id="四、win11专属加减音量新姿势"><a href="#四、win11专属加减音量新姿势" class="headerlink" title="四、win11专属加减音量新姿势"></a><strong>四、win11专属加减音量新姿势</strong></h5><p>只需将鼠标移动至桌面右下角放在音量图标上，滚动滚轮即可实现音量加减（还不快去升级win11）<br><img src="/images/volmue.gif"></p><h5 id="五、程序员撸代码或文字处理小tips"><a href="#五、程序员撸代码或文字处理小tips" class="headerlink" title="五、程序员撸代码或文字处理小tips"></a><strong>五、程序员撸代码或文字处理小tips</strong></h5><p><em>能量巨大但往往被忽视的控制区</em><br><a href="https://imgse.com/i/x0gafP"><img src="https://s1.ax1x.com/2022/10/15/x0gafP.md.jpg" alt="x0gafP.md.jpg"></a><br>对于大多数编辑器文字的或代码的比如vscode, word, idea都支持home,end,ctrl按键的组合<em>（啊，你说你用vim（全球最受程序员欢迎的编辑器）。哦那没事了确实熟练运用的话可以做到手不离键盘）</em></p><p>比如<strong>Home&#x2F;End</strong><br>跳转至该行代码的首或尾（对于word等非编程工具也同样适用）<br><img src="/images/home.gif"><br>既然聪明如你那么应该清楚下面的快捷键进行的操作了<br>ctrl + Home&#x2F; ctrl + End<br>跳转到该文本的首或尾<br><img src="/images/chome.gif"><br>当然对于vscode来说你也可以通过ctrl + 鼠标点击代码块来进行跳转，而且对于vscode来说根本没必要记住快捷键因为你可以根据自己的习惯来进行任意修改</p><hr><h3 id="软件推荐篇"><a href="#软件推荐篇" class="headerlink" title="软件推荐篇"></a>软件推荐篇</h3><h5 id="一、vscode—-全球除了vim外最受程序员欢迎的编辑器"><a href="#一、vscode—-全球除了vim外最受程序员欢迎的编辑器" class="headerlink" title="一、vscode—-全球除了vim外最受程序员欢迎的编辑器"></a><strong><a href="https://code.visualstudio.com/">一、vscode</a>—-全球除了vim外最受程序员欢迎的编辑器</strong></h5><p>对于开发人员来说，一款好的编辑器就是一件称手的兵器。传统的集成环境式编辑器不仅臃肿，而且占用大量资源，那么有没有一款编辑器既轻量，又功能强大呢？<br>那么vscode将是你的不二之选，支持众多编程语言，可根据自己需求来添加扩展或功能，在进行一些轻量级开发时vscode将会是非常地nice.<strong>当然即使你完全不懂的编程也完全没有关系，你完全可以将vscode当成一个万能阅读器来处理文本信息</strong>（比如本篇文章就是用markdown + all in one插件来书写），vscode本质是一个编辑器所以不能直接上手写代码而需要手动配置文档，微软官方的doc文档写的非常详细，本人非常不建议阅读csdn或百度上什么博客上的教程配置，直接看官方不香吗？而且配置比如java或c&#x2F;c++等语言环境也能让你学到不少东西<br><a href="https://imgse.com/i/x0RS2V"><img src="https://s1.ax1x.com/2022/10/15/x0RS2V.md.png" alt="x0RS2V.md.png"></a></p><h5 id="二、powertoys—-一款功能强大的小工具"><a href="#二、powertoys—-一款功能强大的小工具" class="headerlink" title="二、powertoys—-一款功能强大的小工具"></a><strong>二、<a href="https://github.com/microsoft/PowerToys">powertoys</a>—-一款功能强大的小工具</strong></h5><p>正所谓微软出品必属精品，既然是自家的操作系统那必然是如虎添翼，它含有窗口始终置顶功能这样你就不用担心点了一下另一个窗口而你当前的窗口被覆盖掉，它还有拾色器，和窗口布局等工具<br><a href="https://imgse.com/i/x0RYGt"><img src="https://s1.ax1x.com/2022/10/15/x0RYGt.md.png" alt="x0RYGt.md.png"></a><br>而其中<strong>我最喜爱的功能还得是鼠标实用工具</strong><br>当你因为思绪混乱而一时找不到鼠标时（双显示器应该会有这个烦恼），按两下ctrl键它就能让你礼貌而不失优雅地快速找到你的鼠标<br><img src="/images/mouse.gif"></p><h5 id="三、keyviz-—-按键显示软件"><a href="#三、keyviz-—-按键显示软件" class="headerlink" title="三、keyviz —- 按键显示软件"></a><strong>三、<a href="https://github.com/mulaRahul/keyviz">keyviz</a> —- 按键显示软件</strong></h5><p>细心的小伙伴应该发现了在以上的gif中我输入的按键都会在屏幕的右下角显示，这款软件就是keyviz，在给他人分享屏幕或者录制教学视频时应该挺有帮助的<br><a href="https://imgse.com/i/x0W3OU"><img src="https://s1.ax1x.com/2022/10/15/x0W3OU.md.png" alt="x0W3OU.md.png"></a><br>他的动画和按键类型颜色大小出现时间，以及动画持续时间都可以自定义，而且非常地轻量仅有8m的大小还有免安装版本</p><h5 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a><strong>四、其他</strong></h5><p>对于其他的我常用的软件就不单独分专栏来讲述了，而是笼统的在这里介绍</p><ul><li><a href="https://www.bandisoft.com/bandizip/">bandzip</a> 一款好用的解压缩软件，有充值版本但没必要免费就够用了</li><li><a href="https://potplayer.daum.net/">potplayer</a> 万能播放器，基于强大的ffmepg来编写基本上主流视频，音频格式都能播放，还可以外挂字幕</li><li><a href="https://note.youdao.com/">有道云笔记</a> 个人觉得最近比较好的云笔记，而且支持markdown格式书写</li><li><a href="https://www.netsarang.com/en/xshell/">xshell</a> 开发人员必备连接远程服务器ssh工具</li><li><a href="https://git-scm.com/">git</a> 每个开发人员都应该知道的版本管理软件，<a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429?fromtitle=linus&fromid=400810&fr=aladdin">linus(linux之父)</a>继linx之后又一名作<a href="https://www.bilibili.com/video/BV1Hg411T7fT/?spm_id_from=333.788.recommend_more_video.0&vd_source=878974c416ebc6deb0684e7b32e52603">（名场面）</a></li><li><a href="https://www.jetbrains.com/idea/">idea</a> 由jetbrain公司开发，学生可以用学生证明免费白嫖ultrmate版本的最好用的java集成开发环境，打工人必备</li><li><a href="https://www.screentogif.com/">ScreenToGif</a> 一款gif制作软件</li><li><a href="https://www.systemax.jp/en/sai/devdept.html">SAI2</a> 一款画图软件有数位板的话可以拿来写笔记</li><li>IDM 懂得都懂</li></ul><h5 id="好的暂时分享到这，最近新加了一个基于gitalk的评论功能，如果各位小伙伴有什么好用的软件或工具也可以在评论区分享文章中有错误也可以指正-这里是黑夜梦想家，感谢您的阅读。"><a href="#好的暂时分享到这，最近新加了一个基于gitalk的评论功能，如果各位小伙伴有什么好用的软件或工具也可以在评论区分享文章中有错误也可以指正-这里是黑夜梦想家，感谢您的阅读。" class="headerlink" title="好的暂时分享到这，最近新加了一个基于gitalk的评论功能，如果各位小伙伴有什么好用的软件或工具也可以在评论区分享文章中有错误也可以指正,这里是黑夜梦想家，感谢您的阅读。"></a>好的暂时分享到这，最近新加了一个基于gitalk的评论功能，如果各位小伙伴有什么好用的软件或工具也可以在评论区分享文章中有错误也可以指正,这里是黑夜梦想家，感谢您的阅读。</h5><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimgo.liulanqi.net%2Fimg2021%2F8%2F3%2F16%2F2021080306162527.jpg&refer=http%3A%2F%2Fimgo.liulanqi.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1668431417&t=9e490a8af4f2737cca5f64cd9a112976"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机小tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第314期周赛周赛</title>
      <link href="/posts/a2a8/"/>
      <url>/posts/a2a8/</url>
      
        <content type="html"><![CDATA[<h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a><a href="https://leetcode.cn/contest/weekly-contest-314/problems/the-employee-that-worked-on-the-longest-task/">第一题</a></h3><hr><p><a href="https://imgse.com/i/xdoNTg"><img src="https://s1.ax1x.com/2022/10/14/xdoNTg.jpg" alt="xdoNTg.jpg"></a></p><hr><div align='center'><font size='4'><br>“只因你太美”<br></font></div><span id="more"></span><h4 id="方法：暴力枚举"><a href="#方法：暴力枚举" class="headerlink" title="方法：暴力枚举"></a>方法：暴力枚举</h4><p>代码(java版本)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int hardestWorker(int n, int[][] logs) &#123;</span><br><span class="line">        int res = logs[0][1]; //logs == [id, res],分别表示第零个的时长和员工id</span><br><span class="line">        int id = logs[0][0];</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt; logs.length; i++) &#123;</span><br><span class="line">            if (res &lt; logs[i][1] - logs[i - 1][1] || (res == logs[i][1] - logs[i - 1][1] &amp;&amp; id &gt; logs[i][0])) &#123;</span><br><span class="line">                //题目中 2&lt;= n &lt;= 500,所以下标用logs[i][1] - logs[i - 1][1]表示所用时长</span><br><span class="line">                //更新res 和id 的条件为 当下一个的时长大于当前时长，或者当前时长和下一时长相等但是当前时长的id</span><br><span class="line">                //大于下一时长的id所以需要更新，下标i代表下一时长</span><br><span class="line">                res = logs[i][1] - logs[i - 1][1];</span><br><span class="line">                id = logs[i][0];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return id;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/posts/3d22/"/>
      <url>/posts/3d22/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><hr><p><img src="/images/yourname.jpg"></p><div align='center'><font size='4'><br>“就同活着一样。并非因为有了结果，过程才具有意义。而是为了为了便宜地凸显过程这玩意的意义，抑或是拐弯抹角地比喻其局限性，才在某一个地点姑且设置一个结束。         ---《当我谈跑步时，我谈些什么》”<br></font></div><span id="more"></span><h3 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h3><p>最近一直在想象，一个第一次搭建网站的人发送的第一篇博客文章会是什么样的，随着网站的搭建进度推进这个问题也从想象变成了实际的效果呈现在了大家的眼前。</p><hr><p><em>奋战了几天的我</em></p><div align="center"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs5.51cto.com%2Foss%2F201807%2F24%2F3988b4a7026a047f31134c3520f65354.jpeg&refer=http%3A%2F%2Fs5.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1665930949&t=1200b959020eb5d151a5127c517b47dd"</div><hr><p>搭建一个属于自己的网站其实是很早以前就有了的想法，以前总想着连服务器也自己搭建，自己购买硬件配置自己组装，自己学一学 html, css, java script 自己写一个网站。但随着自己在计算机方面的不断深入学习了解到，搭建一个网站出了技术方面的问题，还有资金以及相关政策的因素所以最后还选择了用云服务器 + hexo的快捷方式。因为搭建个人博客最主要的目地无非以下几点：</p><ul><li>分享自己地一些见闻看法，拥有一个属于自己地小天地</li><li>整理自己的思维，把学习的笔记也上传到这</li><li>分享一些自己关于计算机相关的知识和使用小技巧</li><li>尝试一些不同的技术，虽然自己不是搞前端的</li><li>搭建一个自己的网站不是一件很”geek”的事情吗？</li></ul><hr><h3 id="Emphasing-Semantic"><a href="#Emphasing-Semantic" class="headerlink" title="Emphasing Semantic"></a>Emphasing Semantic</h3><p>总之我想要重视的是 Semantic 而至于 Formatting 等以后自己技术变得更加成熟后再慢慢提升，饭得一口一口吃，万丈高楼平地起，总得慢慢来。涵哥说：“这种博客最后大多是只有自己来看的”。但我想过程是更重要的，起码我体验了自己动手的过程，我总是对这样的事情乐此不疲，上学期花了快四周的时间实现了复刻<a href="https://www.bilibili.com/video/BV1VA411p7MD?spm_id_from=333.999.0.0&vd_source=878974c416ebc6deb0684e7b32e52603">稚晖君的 holocubic</a> ,假期又花了一点时间自己组装了一台电脑，这些麻烦事对我来说意义非凡，“别人大概怎么都可以搪塞，自己的心灵却无法蒙混过关”。<br><em>我做的 holocubic</em><br><img src="/images/holocubic.jpg"></p><h4 id="干任何事只要是自己想干的都不是累的"><a href="#干任何事只要是自己想干的都不是累的" class="headerlink" title="干任何事只要是自己想干的都不是累的"></a>干任何事只要是自己想干的都不是累的</h4><p><em>5km花了15’20的<a href="https://www.bilibili.com/video/BV1Hr4y1C7FP?spm_id_from=333.337.search-card.all.click&vd_source=878974c416ebc6deb0684e7b32e52603">不破圣衣</a>小姐姐</em><br><img src="https://img2.baidu.com/it/u=4293132326,1032254160&fm=253&fmt=auto&app=120&f=JPEG?w=667&h=500"></p><p>假期一个朋友给我推荐了一部叫做<a href="https://www.bilibili.com/bangumi/play/ss25742?spm_id_from=333.337.0.0">《强风吹拂》</a>的动漫，里面讲述了一群志向各异的伙伴如何通过过努力，最后参加日本著名的长跑竞赛<a href="https://baike.baidu.com/item/%E7%AE%B1%E6%A0%B9%E9%A9%BF%E4%BC%A0/16596884?fr=aladdin">箱根驿传</a>并且最后获得了来年的保留种子队伍资格，村上在书中说：并不是有个人跑来找我，劝诱我：“跑步吧”，我就沿着马路开始跑步。也没有什么人跑来找我跟我说 “你当小说家吧” ，我就开始写小说。突然有一天，我出于喜欢开始写小说。又有一天，我出于喜欢开始在马路上跑步。不拘什么，按照喜欢的方式做喜欢的事，我就是这样生活的。纵然收到别人阻止，遭到恶意非难，我都不曾改变。这样一个人，又能向谁索求什么呢？<br>我也就这样开始了我的5km跑，想跑就跑，累了就歇。就连世界长跑冠军都会觉得长跑有时候是件痛苦的事，我为什么不能随心所欲，就像我搭建一个博客，或者干其他任何的事情，自己发自内心想干，那就去着手，先做起来吧，等到遇到了问题再慢慢地解决。</p><p><em>自己拍的武汉夜景</em><br><img src="/images/wuhan.jpg"></p><h5 id="PS-目前网站尚在搭建阶段，很多功能还不完善，比如登录评论，分享等功能-先不要登录-，以后会陆续上线，慢慢会从静态网页变成动态自己搞一个后端啥的，还有一件事那就是服务器也带宽较小，各位下手还是悠着点。"><a href="#PS-目前网站尚在搭建阶段，很多功能还不完善，比如登录评论，分享等功能-先不要登录-，以后会陆续上线，慢慢会从静态网页变成动态自己搞一个后端啥的，还有一件事那就是服务器也带宽较小，各位下手还是悠着点。" class="headerlink" title="PS:目前网站尚在搭建阶段，很多功能还不完善，比如登录评论，分享等功能(先不要登录)，以后会陆续上线，慢慢会从静态网页变成动态自己搞一个后端啥的，还有一件事那就是服务器也带宽较小，各位下手还是悠着点。"></a><em>PS:目前网站尚在搭建阶段，很多功能还不完善，比如登录评论，分享等功能(先不要登录)，以后会陆续上线，慢慢会从静态网页变成动态自己搞一个后端啥的，还有一件事那就是服务器也带宽较小，各位下手还是悠着点。</em></h5>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
